{"version":3,"sources":["assets/mock-tests.ts","store/actions.ts","components/Login.tsx","components/TermsAndConditions.tsx","components/BeforeTest.tsx","components/QuestionListView.tsx","components/QuestionView.tsx","components/TestView.tsx","utils.ts","components/AfterTest.tsx","components/AfterTutorial.tsx","components/Examinee.tsx","components/App.tsx","serviceWorker.ts","store/reducers.ts","index.tsx"],"names":["mockChoices","questionId","choices","id","content","mockTest","name","timelimit","deadline","undefined","completed","questions","abandoned","tried","selectedChoiceIndex","viewingQuestionIndex","mockTutorial","actionCreatorUpdateCurrentTimestamp","createActionCreator","resolve","timestamp","Date","now","actionCreatorLogIn","userId","actionCreatorAgreeToTerms","partialActionCreatorLoadTest","fetch","complete","tutorial","test","error","actionCreatorLoadtests","dispatch","Promise","setTimeout","then","response","actionCreatorStartTutorial","testId","actionCreatorStartTest","actionCreatorSetTestDeadline","actionCreatorViewQuestion","partialActionCreatorAbandonQuestion","actionCreatorAbandonQuestion","actionCreatorSetQuestionDeadline","partialActionCreatorUnsealQuestion","actionCreatorUnsealQuestion","data","find","actionCreatorUpdateChoice","choiceId","actionCreatorExitQuestion","actionCreatorExitTest","actionCreatorReturnToTestView","Login","useDispatch","useState","inputId","setInputId","fireLogIn","onSubmit","type","value","onChange","event","target","onClick","TermsAndConditions","BeforeTest","useSelector","state","examinee","QuestionListView","locked","map","question","questionIndex","key","disabled","QuestionView","currentTimestamp","remainingSeconds","Math","floor","choice","i","TestView","filter","length","hours","minutes","seconds","formatRemainingTime","shouldLockQuestionList","AfterTest","AfterTutorial","Examinee","stage","App","useEffect","intervalId","setInterval","clearInterval","Boolean","window","location","hostname","match","testReducer","action","getType","payload","indexOf","defaultExamineeState","agreedToTerms","mainReducer","combineReducers","console","log","store","createStore","applyMiddleware","thunkMiddleware","createLogger","predicate","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63212441.chunk.js","sourcesContent":["import { TestState, QuestionChoiceState, QuestionId } from \"../store/state\";\r\n\r\nexport const mockChoices\r\n: {questionId: QuestionId, choices: QuestionChoiceState[]}[]\r\n  = [\r\n  {\r\n    questionId: 'tutorialQuestion1',\r\n    choices: [\r\n      { id: 0, content: '준비' },\r\n      { id: 1, content: '예비' },\r\n      { id: 2, content: '열심' },\r\n      { id: 3, content: '예습' },\r\n    ]\r\n  },\r\n\r\n  {\r\n    questionId: 'tutorialQuestion2',\r\n    choices: [\r\n      { id: 0, content: '준비' },\r\n      { id: 1, content: '연습' },\r\n      { id: 2, content: '완료' },\r\n      { id: 3, content: '시작' },\r\n    ]\r\n  },\r\n\r\n  {\r\n    questionId: 'question1',\r\n    choices: [\r\n      { id: 0, content: '모든 사람이 평등하기 때문에' },\r\n      { id: 1, content: '모든 재산은 기본적으로 국가의 것이기 때문에' },\r\n      { id: 2, content: '국가에서 국민으로부터 세금을 거두어들이기 때문에' },\r\n      { id: 3, content: '함께 사는 다른 사람을 배려해야 하기 때문에' },\r\n    ]\r\n  },\r\n\r\n\r\n  {\r\n    questionId: 'question2',\r\n    choices: [\r\n      { id: 0, content: '인본주의적 교육을 받을 권리' },\r\n      { id: 1, content: '인간답게 살아 갈 권리' },\r\n      { id: 2, content: '인간 관계를 맺을 권리' },\r\n      { id: 3, content: '인사에 공정을 요구할 권리' },\r\n    ]\r\n  },\r\n\r\n]\r\n\r\nexport const mockTest: TestState = {\r\n  id: 'asdf',\r\n  name: '사회학적 지식 테스트',\r\n  timelimit: 1500,\r\n  deadline: undefined,\r\n  completed: false,\r\n  questions: [\r\n    {\r\n      id: 'question1',\r\n      content: '재산권 행사를 할 때 공공 복리의 의무를 둔 까닭은 무엇인가?',\r\n      timelimit: 7,\r\n      deadline: undefined,\r\n      abandoned: false,\r\n      tried: false,\r\n      choices: undefined,\r\n      selectedChoiceIndex: undefined\r\n    },\r\n    {\r\n      id: 'question2',\r\n      content: '인권은 어떤 권리인가?',\r\n      timelimit: 7,\r\n      deadline: undefined,\r\n      abandoned: false,\r\n      tried: false,\r\n      choices: undefined,\r\n      selectedChoiceIndex: undefined\r\n    }\r\n\r\n  ],\r\n  viewingQuestionIndex: undefined\r\n}\r\n\r\nexport const mockTutorial: TestState = {\r\n  id: 'asdfg',\r\n  name: '튜토리얼',\r\n  timelimit: 300,\r\n  deadline: undefined,\r\n  completed: false,\r\n  questions: [\r\n    {\r\n      id: 'tutorialQuestion1',\r\n      content: '이 문제는 객관식이지만 선다형 답지가 표시된 시간 동안만 제시됩니다. 시간 내에 반응하지 못하면 감점되지만, 문제를 포기하면 감점되지 않습니다. 이제 \"선택지 보기\"를 누른 후 답지 가운데서 \"준비\"를 선택하시기 바랍니다.',\r\n      timelimit: 5,\r\n      deadline: undefined,\r\n      abandoned: false,\r\n      tried: false,\r\n      choices: undefined,\r\n      selectedChoiceIndex: undefined\r\n    },\r\n    {\r\n      id: 'tutorialQuestion2',\r\n      content: '한 번 더 연습해봅시다. 답지에서 \"완료\"를 선택하세요',\r\n      timelimit: 5,\r\n      deadline: undefined,\r\n      abandoned: false,\r\n      tried: false,\r\n      choices: undefined,\r\n      selectedChoiceIndex: undefined\r\n    }\r\n  ],\r\n  viewingQuestionIndex: undefined\r\n}\r\n","import { createActionCreator } from 'deox'\r\nimport { UserId, TestId, QuestionId, QuestionChoiceId, TestState, QuestionChoiceState } from './state';\r\nimport { Dispatch } from 'react';\r\nimport { mockTest, mockTutorial, mockChoices } from '../assets/mock-tests';\r\n\r\n/* If needed, you can declare types of actions and action creators like below\r\nexport type ActionCreatorLogIn = typeof actionCreatorLogIn;\r\nexport type ActionLogIn = ReturnType<ActionCreatorLogIn>;\r\n*/\r\n\r\nexport const actionCreatorUpdateCurrentTimestamp = createActionCreator(\r\n  'UPDATE_CURRENT_TIMESTAMP', resolve =>\r\n  (timestamp: number = Date.now()) => resolve({ timestamp })\r\n)\r\n\r\nexport const actionCreatorLogIn = createActionCreator(\r\n  'LOG_IN', resolve =>\r\n  (userId: UserId, timestamp: number = Date.now()) => resolve({ userId, timestamp })\r\n)\r\n\r\nexport const actionCreatorAgreeToTerms = createActionCreator(\r\n  'AGREE_TO_TERMS', resolve =>\r\n  (timestamp: number = Date.now()) => resolve({ timestamp })\r\n)\r\n\r\nexport const partialActionCreatorLoadTest = {\r\n  fetch: createActionCreator('LOAD_TEST_FETCH', resolve =>\r\n    (timestamp: number = Date.now()) => resolve({ timestamp })),\r\n  complete: createActionCreator('LOAD_TEST_COMPLETE', resolve =>\r\n    (tutorial: TestState, test: TestState, timestamp: number = Date.now()) =>\r\n      resolve({ tutorial, test, timestamp })),\r\n  error: createActionCreator('LOAD_TEST_ERROR', resolve =>\r\n    (timestamp: number = Date.now()) => resolve({ timestamp })),\r\n}\r\n\r\nexport function actionCreatorLoadtests() {\r\n  return (dispatch: Dispatch<ReducibleActions>) => {\r\n    dispatch(partialActionCreatorLoadTest.fetch());\r\n    return new Promise(resolve => setTimeout(resolve, 500))\r\n      .then(\r\n        response => dispatch(\r\n          partialActionCreatorLoadTest.complete(mockTutorial, mockTest)\r\n        )\r\n      )\r\n  }\r\n}\r\n\r\nexport const actionCreatorStartTutorial = createActionCreator(\r\n  'START_TUTORIAL', resolve =>\r\n  (testId: TestId, timestamp: number = Date.now()) => resolve({ testId, timestamp })\r\n)\r\n\r\nexport const actionCreatorStartTest = createActionCreator(\r\n  'START_TEST', resolve =>\r\n  (testId: TestId, timestamp: number = Date.now()) => resolve({ testId, timestamp })\r\n)\r\n\r\nexport const actionCreatorSetTestDeadline = createActionCreator(\r\n  'SET_TEST_DEADLINE', resolve =>\r\n  (timestamp: number = Date.now()) => resolve({ timestamp })\r\n)\r\n\r\nexport const actionCreatorViewQuestion = createActionCreator(\r\n  'VIEW_QUESTION', resolve =>\r\n  (questionId: QuestionId, timestamp: number = Date.now()) => resolve({ questionId, timestamp })\r\n)\r\n\r\nexport const partialActionCreatorAbandonQuestion = {\r\n  fetch: createActionCreator('ABANDON_QUESTION_FETCH', resolve =>\r\n    (questionId: QuestionId, timestamp: number = Date.now()) =>\r\n      resolve({ questionId, timestamp })),\r\n  complete: createActionCreator('ABANDON_QUESTION_COMPLETE', resolve =>\r\n    (questionId: QuestionId, timestamp: number = Date.now()) =>\r\n      resolve({ questionId, timestamp })),\r\n  error: createActionCreator('ABANDON_QUESTION_ERROR', resolve =>\r\n    (questionId: QuestionId, timestamp: number = Date.now()) =>\r\n      resolve({ questionId, timestamp })),\r\n}\r\n\r\nexport function actionCreatorAbandonQuestion(questionId: QuestionId) {\r\n  return (dispatch: Dispatch<ReducibleActions>) => {\r\n    dispatch(partialActionCreatorAbandonQuestion.fetch(questionId))\r\n    return new Promise(resolve => setTimeout(resolve, 500))\r\n      .then(\r\n        response => dispatch(\r\n          partialActionCreatorAbandonQuestion.complete(questionId)\r\n        )\r\n      )\r\n  }\r\n}\r\n\r\nexport const actionCreatorSetQuestionDeadline = createActionCreator(\r\n  'SET_QUESTION_DEADLINE', resolve =>\r\n  (questionId: QuestionId, timestamp: number = Date.now()) => resolve({ questionId, timestamp })\r\n)\r\n\r\nexport const partialActionCreatorUnsealQuestion = {\r\n  fetch: createActionCreator('UNSEAL_QUESTION_FETCH', resolve =>\r\n    (questionId: QuestionId, timestamp: number = Date.now()) =>\r\n      resolve({ questionId, timestamp })),\r\n  complete: createActionCreator('UNSEAL_QUESTION_COMPLETE', resolve =>\r\n    (questionId: QuestionId, choices: QuestionChoiceState[], timestamp: number = Date.now()) =>\r\n      resolve({ questionId, choices, timestamp })),\r\n  error: createActionCreator('UNSEAL_QUESTION_ERROR', resolve =>\r\n    (questionId: QuestionId, timestamp: number = Date.now()) =>\r\n      resolve({ questionId, timestamp })),\r\n}\r\n\r\nexport function actionCreatorUnsealQuestion(questionId: QuestionId) {\r\n  return (dispatch: Dispatch<ReducibleActions>) => {\r\n    dispatch(partialActionCreatorUnsealQuestion.fetch(questionId))\r\n    return new Promise(resolve => setTimeout(resolve, 500))\r\n      .then(\r\n        response => {\r\n          const data = mockChoices.find(data => data.questionId === questionId)\r\n          dispatch(\r\n            partialActionCreatorUnsealQuestion.complete(\r\n              questionId, data ? data.choices : []))\r\n          dispatch(\r\n            actionCreatorSetQuestionDeadline(questionId)\r\n          )\r\n        }\r\n      )\r\n  }\r\n}\r\n\r\nexport const actionCreatorUpdateChoice = createActionCreator(\r\n  'UPDATE_CHOICE', resolve =>\r\n  (questionId: QuestionId, choiceId: QuestionChoiceId, timestamp: number = Date.now()) =>\r\n    resolve({ questionId, choiceId, timestamp })\r\n)\r\n\r\nexport const actionCreatorExitQuestion = createActionCreator(\r\n  'EXIT_QUESTION', resolve =>\r\n  (questionId: QuestionId, timestamp: number = Date.now()) => resolve({ questionId, timestamp })\r\n)\r\n\r\nexport const actionCreatorExitTest = createActionCreator(\r\n  'EXIT_TEST', resolve =>\r\n  (timestamp: number = Date.now()) => resolve({ timestamp })\r\n)\r\n\r\nexport const actionCreatorReturnToTestView = createActionCreator(\r\n  'RETURN_TO_TEST_VIEW', resolve =>\r\n  (timestamp: number = Date.now()) => resolve({ timestamp })\r\n)\r\n\r\n\r\n\r\n\r\nexport const allUnitActionCreators = [\r\n  actionCreatorUpdateCurrentTimestamp,\r\n  actionCreatorLogIn,\r\n  actionCreatorAgreeToTerms,\r\n  actionCreatorStartTutorial,\r\n  actionCreatorStartTest,\r\n  actionCreatorSetTestDeadline,\r\n  actionCreatorViewQuestion,\r\n  actionCreatorSetQuestionDeadline,\r\n  actionCreatorUpdateChoice,\r\n  actionCreatorExitQuestion,\r\n  actionCreatorExitTest,\r\n  actionCreatorReturnToTestView,\r\n];\r\n\r\nexport const allPartialActionCreators = [\r\n  partialActionCreatorLoadTest.complete,\r\n  partialActionCreatorLoadTest.error,\r\n  partialActionCreatorLoadTest.fetch,\r\n  partialActionCreatorAbandonQuestion.complete,\r\n  partialActionCreatorAbandonQuestion.error,\r\n  partialActionCreatorAbandonQuestion.fetch,\r\n  partialActionCreatorUnsealQuestion.complete,\r\n  partialActionCreatorUnsealQuestion.error,\r\n  partialActionCreatorUnsealQuestion.fetch,\r\n]\r\n\r\nexport const allThunkActionCreators = [\r\n  actionCreatorLoadtests,\r\n  actionCreatorUnsealQuestion,\r\n  actionCreatorAbandonQuestion,\r\n]\r\n\r\n\r\nexport type AllUnitActionCreators = typeof allUnitActionCreators[number]\r\nexport type AllPartialActionCreators = typeof allPartialActionCreators[number]\r\nexport type AllThunkActionCreators = typeof allThunkActionCreators[number]\r\n\r\nexport type ReducibleActions = ReturnType<AllUnitActionCreators> | ReturnType<AllPartialActionCreators>\r\nexport type DispatchableActions = ReturnType<AllUnitActionCreators> | ReturnType<AllThunkActionCreators>\r\n\r\nexport type CustomDispatch = Dispatch<DispatchableActions>\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreatorLogIn, CustomDispatch } from '../store/actions';\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n\r\n  const [inputId, setInputId] = useState('')\r\n  // const [inputPassword, setInputPassword] = useState('')\r\n\r\n  const fireLogIn = () => {dispatch(actionCreatorLogIn(inputId))}\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={fireLogIn}>\r\n        ID: <input\r\n              type=\"text\"\r\n              value={inputId}\r\n              onChange={(event) => setInputId(event.target.value)}\r\n            />\r\n        {/* PW: <input\r\n              type=\"password\"\r\n              value={inputPassword}\r\n              onChange={(event) => setInputPassword(event.target.value)}\r\n            /> */}\r\n      </form>\r\n      <div>로그인해주세요 (아무거나 입력)</div>\r\n      <button\r\n        onClick={fireLogIn}\r\n      >\r\n        로그인\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { actionCreatorAgreeToTerms, CustomDispatch } from '../store/actions'\r\n\r\nconst TermsAndConditions: React.FC = () => {\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n  return (\r\n    <div>\r\n      <div>시험 약관에 동의하십니까?</div>\r\n      <button onClick={() => dispatch(actionCreatorAgreeToTerms())}>동의</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TermsAndConditions\r\n","import React from 'react'\r\nimport { AppState, UserId } from '../store/state'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionCreatorLoadtests, actionCreatorStartTutorial, actionCreatorStartTest, CustomDispatch, actionCreatorSetTestDeadline } from '../store/actions';\r\n\r\nconst BeforeTest: React.FC = () => {\r\n  const userId = useSelector((state: AppState) => state.examinee.userId) as UserId\r\n  const tutorial = useSelector((state: AppState) => state.examinee.tutorial)\r\n  const test = useSelector((state: AppState) => state.examinee.test)\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n\r\n  if (!tutorial || !test) {\r\n    dispatch(actionCreatorLoadtests());\r\n    return <p>{userId}님의 테스트를 불러오는 중...</p>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        <span>{userId}님, 환영합니다!</span>\r\n      </p>\r\n      <p>\r\n        {\"<안내 문구>\"}\r\n      </p>\r\n      <div>\r\n        { tutorial.completed ? null : (\r\n            <div>\r\n              <h6>튜토리얼</h6>\r\n              <button onClick={() => {\r\n                dispatch(actionCreatorStartTutorial(tutorial.id))\r\n                dispatch(actionCreatorSetTestDeadline())\r\n              }}\r\n              >\r\n                시작하기\r\n              </button>\r\n            </div>\r\n          )\r\n        }\r\n        <h6>시험 시작</h6>\r\n        <button onClick={() => {\r\n          dispatch(actionCreatorStartTest(test.id))\r\n          dispatch(actionCreatorSetTestDeadline())\r\n        }}\r\n        >\r\n          시작하기\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BeforeTest;\r\n","import React from 'react'\r\nimport { QuestionState } from '../store/state'\r\nimport { useDispatch } from 'react-redux'\r\nimport { actionCreatorViewQuestion, CustomDispatch } from '../store/actions'\r\n\r\nexport interface QuestionListViewProps {\r\n  questions: QuestionState[]\r\n  locked: boolean\r\n}\r\n\r\nconst QuestionListView: React.FC<QuestionListViewProps> = ({ questions, locked }) => {\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n  return (\r\n    <div>\r\n      <h6>남은 문제 목록</h6>\r\n      {questions.map((question, questionIndex) => (\r\n        <div key={questionIndex}>\r\n          { (question.abandoned || question.tried)\r\n            ? null\r\n            : (\r\n              <button\r\n                onClick={() => locked ? null : dispatch(actionCreatorViewQuestion(question.id))}\r\n                disabled={locked}\r\n              >\r\n                {questionIndex + 1}번\r\n              </button>\r\n            )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionListView\r\n","import React from 'react'\r\nimport { QuestionState, AppState } from '../store/state'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CustomDispatch, actionCreatorUnsealQuestion, actionCreatorAbandonQuestion, actionCreatorExitQuestion, actionCreatorUpdateChoice } from '../store/actions'\r\n\r\nexport interface QuestionViewProps {\r\n  question: QuestionState | undefined\r\n}\r\n\r\nconst QuestionView: React.FC<QuestionViewProps> = ({ question }) => {\r\n  const currentTimestamp = useSelector((state: AppState) => state.currentTimestamp)\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n\r\n  if (question) {\r\n    if (question.deadline && question.choices) {\r\n      if (question.deadline <= currentTimestamp) {\r\n        dispatch(actionCreatorExitQuestion(question.id))\r\n      }\r\n      const remainingSeconds = Math.floor((question.deadline - currentTimestamp) / 1000)\r\n      return(\r\n        <div>\r\n          <p>{question.content}</p>\r\n          남은 시간: {remainingSeconds} 초\r\n          {question.choices.map((choice, i) => (\r\n            <div key={i}>\r\n            <button\r\n              onClick={() => dispatch(actionCreatorUpdateChoice(question.id, choice.id))}\r\n            >\r\n              {i+1}\r\n            </button>\r\n            {\r\n              question.selectedChoiceIndex === i\r\n                ? <b>{choice.content}</b>\r\n                : choice.content\r\n            }\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p>{question.content}</p>\r\n          남은 시간: {question.timelimit} 초\r\n          <button onClick={() =>\r\n            dispatch(actionCreatorUnsealQuestion(question.id))}>선지 보기</button>\r\n          <button onClick={() =>\r\n            dispatch(actionCreatorAbandonQuestion(question.id))}>문제 포기</button>\r\n        </div>\r\n      )\r\n    }\r\n  } else {\r\n    return (\r\n      <div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuestionView\r\n\r\n/*\r\n      {question.choices.map((choice, choiceIndex) => (\r\n        <p key={choiceIndex}>\r\n          <span>{choiceIndex === question.selectedChoiceIndex ? 'V' : ''}</span>\r\n          {choice.content}\r\n        </p>\r\n      ))}\r\n\r\n*/\r\n","import React from 'react'\r\nimport { TestState, AppState } from '../store/state'\r\nimport QuestionListView from './QuestionListView'\r\nimport QuestionView from './QuestionView'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { formatRemainingTime } from '../utils'\r\nimport { actionCreatorExitTest, CustomDispatch } from '../store/actions'\r\n\r\nexport interface TestViewProps {\r\n  test: TestState\r\n}\r\n\r\nconst TestView: React.FC<TestViewProps> = ({ test }) => {\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n\r\n  const currentTimestamp = useSelector((state: AppState) => state.currentTimestamp);\r\n  if (test.deadline && test.deadline <= currentTimestamp) {\r\n    dispatch(actionCreatorExitTest())\r\n    return <div></div>\r\n  }\r\n\r\n  const remainingQuestions = test.questions.filter(question => !question.abandoned && !question.tried)\r\n  if (remainingQuestions.length === 0) {\r\n    dispatch(actionCreatorExitTest())\r\n  }\r\n\r\n  const remainingSeconds = test.deadline\r\n    ? Math.floor((test.deadline - currentTimestamp) / 1000)\r\n    : test.timelimit;\r\n  const {hours, minutes, seconds} = formatRemainingTime(remainingSeconds)\r\n\r\n\r\n  const question = test.viewingQuestionIndex !== undefined\r\n    ? test.questions[test.viewingQuestionIndex]\r\n    : undefined\r\n\r\n  const shouldLockQuestionList =\r\n    !!question && !question.abandoned && !question.tried && !!question.deadline\r\n  return (\r\n    <div>\r\n      <h1>{test.name}</h1>\r\n      <p>남은 시간: {hours ? hours + '시간' : ''} {minutes}분 {seconds}초</p>\r\n      <QuestionView\r\n        question={question}\r\n      />\r\n      <QuestionListView\r\n        questions={test.questions}\r\n        locked={shouldLockQuestionList}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestView\r\n","export function formatRemainingTime(remainingSeconds: number) {\r\n  const hours = Math.floor(remainingSeconds / 3600)\r\n  remainingSeconds -= hours * 3600\r\n  const minutes = Math.floor(remainingSeconds / 60)\r\n  remainingSeconds -= minutes * 60\r\n  const seconds = remainingSeconds\r\n  return {\r\n    hours, minutes, seconds\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst AfterTest: React.FC = () => {\r\n  return <p>테스트가 끝났습니다.</p>\r\n}\r\n\r\nexport default AfterTest\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { CustomDispatch, actionCreatorReturnToTestView } from '../store/actions'\r\n\r\nconst AfterTutorial: React.FC = () => {\r\n  const dispatch = useDispatch<CustomDispatch>()\r\n  return (\r\n    <div>\r\n      <p>튜토리얼이 끝났고 점수의 계산법은...</p>\r\n      <button\r\n        onClick={() => dispatch(actionCreatorReturnToTestView())}\r\n      >\r\n        돌아가기\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AfterTutorial\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState, TestState } from '../store/state';\r\nimport Login from './Login';\r\nimport TermsAndConditions from './TermsAndConditions';\r\nimport BeforeTest from './BeforeTest';\r\nimport TestView from './TestView';\r\nimport AfterTest from './AfterTest';\r\nimport AfterTutorial from './AfterTutorial';\r\n\r\nconst Examinee: React.FC = () => {\r\n  const userId = useSelector((state: AppState) => state.examinee.userId)\r\n  const stage = useSelector((state: AppState) => state.examinee.stage)\r\n  const test = useSelector((state: AppState) => state.examinee.test)\r\n  const tutorial = useSelector((state: AppState) => state.examinee.tutorial)\r\n\r\n  if (!userId) {\r\n    return <Login />\r\n  } else if (stage === 'terms') {\r\n    return <TermsAndConditions />\r\n  } else if (stage === 'before-test') {\r\n    return <BeforeTest />\r\n  } else if (stage === 'on-test') {\r\n    return <TestView test={test as TestState} />\r\n  } else if (stage === 'on-tutorial') {\r\n    return <TestView test={tutorial as TestState}/>\r\n  } else if (stage === 'after-test') {\r\n    return <AfterTest />\r\n  } else if (stage === 'after-tutorial') {\r\n    return <AfterTutorial />\r\n\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Examinee;\r\n","import React, { useEffect } from 'react';\nimport Examinee from './Examinee'\nimport { useDispatch } from 'react-redux';\nimport { CustomDispatch, actionCreatorUpdateCurrentTimestamp } from '../store/actions';\n\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch<CustomDispatch>()\n  useEffect(() => {\n    const intervalId = setInterval(\n      () => dispatch(actionCreatorUpdateCurrentTimestamp()), 200)\n    return () => {\n      clearInterval(intervalId);\n    }\n  })\n  return (\n    <Examinee />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { getType } from \"deox\"\r\nimport { actionCreatorAgreeToTerms, actionCreatorLogIn, actionCreatorStartTutorial, actionCreatorStartTest, ReducibleActions, partialActionCreatorLoadTest, actionCreatorViewQuestion, partialActionCreatorUnsealQuestion, partialActionCreatorAbandonQuestion, actionCreatorUpdateCurrentTimestamp, actionCreatorSetTestDeadline, actionCreatorExitTest, actionCreatorSetQuestionDeadline, actionCreatorExitQuestion, actionCreatorUpdateChoice, actionCreatorReturnToTestView } from \"./actions\"\r\nimport { ExamineeState, TestState } from \"./state\"\r\nimport { combineReducers } from \"redux\"\r\n\r\nexport function testReducer(state: TestState, action: ReducibleActions) {\r\n  switch(action.type) {\r\n    case getType(actionCreatorSetTestDeadline):\r\n      return { ...state,\r\n        deadline: action.payload.timestamp + state.timelimit * 1000\r\n      }\r\n    case getType(actionCreatorViewQuestion): {\r\n      const question = state.questions.find(question => question.id === action.payload.questionId)\r\n      return { ...state,\r\n          viewingQuestionIndex: question ? state.questions.indexOf(question) : undefined\r\n      }\r\n    }\r\n    case getType(partialActionCreatorAbandonQuestion.complete):\r\n      return { ...state,\r\n        questions: state.questions.map(question => (\r\n          question.id === action.payload.questionId\r\n            ? { ...question, abandoned: true }\r\n            : question\r\n        )),\r\n        viewingQuestionIndex: undefined\r\n      }\r\n    case getType(partialActionCreatorUnsealQuestion.complete):\r\n      return { ...state,\r\n        questions: state.questions.map(question => (\r\n          question.id === action.payload.questionId\r\n            ? { ...question, choices: action.payload.choices }\r\n            : question\r\n        ))\r\n      }\r\n    case getType(actionCreatorSetQuestionDeadline):\r\n      return { ...state,\r\n        questions: state.questions.map(question => (\r\n          question.id === action.payload.questionId\r\n            ? { ...question, deadline: action.payload.timestamp + question.timelimit * 1000 }\r\n            : question\r\n        ))\r\n      }\r\n    case getType(actionCreatorUpdateChoice):\r\n      return { ...state,\r\n        questions: state.questions.map(question => {\r\n          if (question.id === action.payload.questionId && question.choices) {\r\n            const choice = question.choices.find(choice => choice.id === action.payload.choiceId)\r\n            return {...question,\r\n              selectedChoiceIndex: choice ? choice.id : undefined\r\n            }\r\n          } else {\r\n            return question\r\n          }\r\n        })\r\n      }\r\n    case getType(actionCreatorExitQuestion):\r\n      return { ...state,\r\n        viewingQuestionIndex: undefined,\r\n        questions: state.questions.map(question => (\r\n          question.id === action.payload.questionId\r\n            ? { ...question, tried: true }\r\n            : question\r\n        ))\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const defaultExamineeState: ExamineeState = {\r\n  userId: undefined,\r\n  agreedToTerms: false,\r\n  stage: 'terms',\r\n  test: undefined,\r\n  tutorial: undefined,\r\n}\r\n\r\nexport function examineeReducer(state = defaultExamineeState, action: ReducibleActions): ExamineeState {\r\n  switch(action.type) {\r\n    case getType(actionCreatorLogIn):\r\n      return { ...state,\r\n        stage: 'terms',\r\n        userId: action.payload.userId\r\n      }\r\n    case getType(actionCreatorAgreeToTerms):\r\n      return { ...state,\r\n        stage: 'before-test',\r\n        agreedToTerms: true\r\n      }\r\n    case getType(partialActionCreatorLoadTest.complete):\r\n      return { ...state,\r\n        tutorial: action.payload.tutorial,\r\n        test: action.payload.test\r\n      }\r\n    case getType(actionCreatorStartTutorial):\r\n      return { ...state,\r\n        stage: 'on-tutorial'\r\n      }\r\n    case getType(actionCreatorStartTest):\r\n      return { ...state,\r\n        stage: 'on-test'\r\n      }\r\n    case getType(actionCreatorSetTestDeadline):\r\n    case getType(actionCreatorViewQuestion):\r\n    case getType(partialActionCreatorUnsealQuestion.fetch):\r\n    case getType(partialActionCreatorUnsealQuestion.complete):\r\n    case getType(partialActionCreatorUnsealQuestion.error):\r\n    case getType(partialActionCreatorAbandonQuestion.fetch):\r\n    case getType(partialActionCreatorAbandonQuestion.complete):\r\n    case getType(partialActionCreatorAbandonQuestion.error):\r\n    case getType(actionCreatorSetQuestionDeadline):\r\n    case getType(actionCreatorUpdateChoice):\r\n    case getType(actionCreatorExitQuestion):\r\n      if (state.stage === 'on-test' && state.test) {\r\n        return { ...state,\r\n          test: testReducer(state.test, action)\r\n        }\r\n      } else if (state.stage === 'on-tutorial' && state.tutorial) {\r\n        return { ...state,\r\n          tutorial: testReducer(state.tutorial, action)\r\n        }\r\n      } else {\r\n        return state\r\n      }\r\n    case getType(actionCreatorExitTest):\r\n      if (state.stage === 'on-tutorial') {\r\n        return { ...state,\r\n          stage: 'after-tutorial',\r\n          tutorial: { ...(state.tutorial as TestState), completed: true }\r\n        }\r\n      } else if (state.stage === 'on-test') {\r\n        return { ...state,\r\n          stage: 'after-test',\r\n          test: { ...(state.test as TestState), completed: true }\r\n        }\r\n      } else {\r\n        return state\r\n      }\r\n    case getType(actionCreatorReturnToTestView):\r\n      return { ...state,\r\n        stage: 'before-test'\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function currentTimestampReducer(state = Date.now(), action: ReducibleActions) {\r\n  switch(action.type) {\r\n    case getType(actionCreatorUpdateCurrentTimestamp):\r\n      return action.payload.timestamp\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const mainReducer = combineReducers({\r\n  examinee: examineeReducer,\r\n  currentTimestamp: currentTimestampReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { mainReducer } from './store/reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconsole.log('actions of type UPDATE_CURRENT_TIMESTAMP will not be displayed here')\n\nconst store = createStore(\n  mainReducer,\n  applyMiddleware(\n    thunkMiddleware,\n    createLogger({\n      predicate: (getState, action) => action.type !== 'UPDATE_CURRENT_TIMESTAMP'\n    }),\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}